// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// TODO: Change the details of description to more specific items used for the Protection Plan Statement
// TODO: Create customer data and check relationshp with user
generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid()) @map("_id") // this is the id of the user
  clerkUserId  String      @unique
  email        String      @unique
  firstName    String
  lastName     String
  imageUrl     String?
  isAdmin      Boolean     @default(false)
  role         String      @default("User")
  active       Boolean     @default(true)
  dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Customer {
  id               String            @id @default(uuid()) @map("_id")
  fName            String
  lName            String
  email            String // create fake email in case user does not have an email. email can
  mobile           String // it is possible that mobile/email is not unique since can have an account on 2 different dealership
  landline         String?
  customerVehicles CustomerVehicle[]
  dealership       Dealership?       @relation(fields: [dealershipId], references: [id])
  dealershipId     String?
  userId           String // entered by logged in user/contact person
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  ProtectionPlan   ProtectionPlan[]

  @@index([dealershipId])
}

model CustomerVehicle {
  id              String           @id @default(uuid()) @map("_id")
  make            String
  model           String?
  year            Int?
  vin             String?          @unique
  plateNo         String           @unique
  transmission    String?
  fuelEngineType  String
  dealerships     Dealership?      @relation(fields: [dealershipId], references: [id])
  dealershipId    String?
  protectionPlans ProtectionPlan[]
  customer        Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId      String
  enteredBy       String // enterd by logged in user
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([customerId])
  @@index([dealershipId])
}

model Dealership {
  id               String            @id @default(uuid()) @map("_id")
  name             String
  address1         String
  address2         String?
  mobile           String            @unique
  landline         String?
  contactPerson    String?
  customerVehicles CustomerVehicle[]
  customers        Customer[]
  protectionPlans  ProtectionPlan[]
  user             User[]
  enteredBy        String? // logged in user when adding dealership record
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
}

model ProtectionPlan {
  id                String          @id @default(uuid()) @map("_id")
  productUsed       String
  serviceDate       DateTime
  expired           Boolean         @default(false)
  expiryDate        DateTime
  serviceInterval   String
  invoice           String          @unique
  odometerFrom      Int
  odometerTo        Int
  reimbursement     String
  approvedOil       Boolean
  covers            String
  customerVehicle   CustomerVehicle @relation(fields: [customerVehicleId], references: [id])
  customerVehicleId String
  customer          Customer        @relation(fields: [customerId], references: [id])
  customerId        String
  dealership        Dealership      @relation(fields: [dealershipId], references: [id])
  dealershipId      String
  enteredBy         String
  createdAt         DateTime
  updatedAt         DateTime

  @@index([customerVehicleId])
  @@index([customerId])
  @@index([dealershipId])
}

// enum Products {
//   BG110
//   BG112
//   BG110_BG208
//   BG110_BG213
//   BG112_BG244
//   BG112_BG245
//   BG109_BG110
//   BG109_BG112
//   BG109_BG110_BG208
//   BG109_BG112_BG244
//   BG109_BG112_BG245
// }

// model PlanType {
//   id String @id
//   name String
//   odometerReading String
// }

// enum ProtectionPlanCat {
//   ENGINE_OIL_SERVICES
//   MOA
//   AUTOMOTIVE_SERVICES
// }

// enum FuelEngineType {
//   GAS
//   DIESEL
// }

// enum Role {
//   USER
//   DEALERSHIP
//   MAIN
//   ADMIN
// }

// enum EngineOil {
//   BG729
//   BG737
//   OEM_APPROVED_OIL
//   OTHER_OIL
// }
